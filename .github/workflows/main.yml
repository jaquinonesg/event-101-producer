name: event-101-producer-ci-cd

on:
  push:
    branches: [ master ]

jobs:
  continuous-integration:
    runs-on: ubuntu-latest

    steps:
      # Step 1      
      - uses: actions/checkout@v2
      
      # Step 2
      - name: Set up Python 
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
          architecture: x64
      # Step 3
      - name: Install Python Virtual ENV
        run: pip3 install virtualenv
      # Step 4
      - name:  Setup Virtual env
        uses: actions/cache@v2
        id: cache-venv
        with:
          path: venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-
      # Step 5
      - name: Activate and Install Depencies into Virtual env
        run: python -m venv venv && source venv/bin/activate &&
          pip3 install -r requirements.txt
        if: steps.cache-venv.outputs.cache-hit != 'true'
      # Step 6     
      - name: Activate venv and Run Test        
        run: . venv/bin/activate && pytest
      
      # Step 7
      - name: Create Zipfile archive of Dependencies
        run: |
          cd ./venv/lib/python3.9/site-packages
          zip -r9 ../../../../ingest_event.zip .
      
      # Step 8
      - name: Add function files to zip file
        run: cd ./ingest_event && zip -g ../ingest_event.zip -r .
      
      # Step 9
      - name: Upload zip file artifact
        uses: actions/upload-artifact@v2
        with:
          name: ingest_event
          path: ingest_event.zip

  deploy-env:
    name: deploy Lambda
    runs-on: ubuntu-latest
    needs: continuous-integration
    steps:
    - uses: actions/checkout@v2.0.0

    - name: Set up Python 
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
        architecture: x64

    - name: Install Python Virtual ENV
      run: pip3 install virtualenv

    - name: NPM - Load cached venv
      id: cached-npm-dependencies
      uses: actions/cache@v2
      with:
        path: node_modules
        key: npm-${{ runner.os }}-${{ hashFiles('**/package.json') }}

    - name: NPM - Install dependencies
      if: steps.cached-npm-dependencies.outputs.cache-hit != 'true'
      run: 'npm install'

    - name: Deploy using sls
      run: 'npx serverless deploy'
      env:
        AWS_ACCESS_KEY_ID: ${{secrets.ID}}
        AWS_SECRET_ACCESS_KEY: ${{secrets.KEY}}